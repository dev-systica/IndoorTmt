using System.Collections; using System.Collections.Generic; using UnityEngine; using UnityEngine.UI; using UnityEngine.EventSystems; using UnityEngine.XR.iOS; using Newtonsoft.Json.Linq; using Newtonsoft.Json; using SimpleJSON; using System.Runtime.InteropServices; using System;



/*========================================  * Classes to hold shape information ======================================== */

[System.Serializable] public class ShapeInfo {     public float px;     public float py;     public float pz;     public float qx;     public float qy;     public float qz;     public float qw;     public int shapeType; }   [System.Serializable] public class ShapeList {     public ShapeInfo[] shapes; }   /*========================================  * Main Class for Managing Markers ======================================== */  public class ShapeManager : MonoBehaviour {      public List<ShapeInfo> shapeInfoList = new List<ShapeInfo>();     public List<GameObject> shapeObjList = new List<GameObject>();     //public Material mShapeMaterial;      private List<int> modelid = new List<int>();     private List<int> modelrefno = new List<int>();     public static List<string> modelname = new List<string>();     public static List<string> Touchname = new List<string>();      public List<Dataholder> Dholder = new List<Dataholder>();      private List<int> keyvalue = new List<int>();     private static  double EPSILON = 0.000001;     //public GameObject shape;     //public GameObject arrow;    // bool delnum = true;       int shapeobjnum = 0;     int shapelistnum = 0;      int key;      string token;    // int DeleteValue = 0;       int touchescount0 = 0;     int touchescount1 = 0;     int touchescount2 = 0;     int touchescount3 = 0;     int touchescount4 = 0;     int touchescount5 = 0;     int touchescount6 = 0;     int touchescount7 = 0;    // int touchescount8 = 0;    // int touchescount9 = 0;       private Vector3 Campos;     public GameObject chagepos;     public GameObject userpos;      public Camera maincam;     public Camera Mapcam;     public GameObject posdetails;     public GameObject mappinglistpanel;       double distance1;     double distance2;     double distance3;         public Text TakeCoordinates;     int camshow = 0;       GameObject firstcircle;     GameObject secondcircle;     GameObject thirdcircle;       public float period = 0.0f;       private float nextUpdate = 5f;      public static int startvalue = 0;       Stack mystack=new Stack();      Stack Uploadstack = new Stack();        string JSONDataString;       GameObject shape;     ShapeInfo shapeInfo;     public GameObject[] models;     //public GameObject[] signs;         // Use this for initialization     void Start()     {         //shape = Instantiate(models[7],models[7].transform.position ,models[7].transform.rotation);         //pos1.x = shape.transform.position.x;         //pos1.y = shape.transform.position.y;         //pos1.z = shape.transform.position.z;         //rot1.x = shape.transform.rotation.x;         //rot1.y = shape.transform.rotation.y;         //rot1.z = shape.transform.rotation.z;         //rot1.w = shape.transform.rotation.w;         //Debug.Log("Initial Position = "+pos1.x+","+pos1.y + ","+pos1.z );         //Debug.Log("Initial Rotation = " + rot1.x + "," + rot1.y + "," + rot1.z+","+rot1.w);     }      //-----------------------------------     // The HitTest to Add a Marker     //-----------------------------------      bool HitTestWithResultType(ARPoint point, ARHitTestResultType resultTypes)     {         List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface().HitTest(point, resultTypes);          if (hitResults.Count > 0)         {             foreach (var hitResult in hitResults)             {                  Debug.Log("Got hit!");                  Vector3 position = UnityARMatrixOps.GetPosition(hitResult.worldTransform);                 Quaternion rotation = UnityARMatrixOps.GetRotation(hitResult.worldTransform);                  //Transform to placenote frame of reference (planes are detected in ARKit frame of reference)                 Matrix4x4 worldTransform = Matrix4x4.TRS(position, rotation, Vector3.one);                 Matrix4x4? placenoteTransform = LibPlacenote.Instance.ProcessPose(worldTransform);                  Vector3 hitPosition = PNUtility.MatrixOps.GetPosition(placenoteTransform.Value);                 Quaternion hitRotation = PNUtility.MatrixOps.GetRotation(placenoteTransform.Value);                  //  hitRotation = Quaternion.Euler(0, 180, 0);                 // add shape                 AddShape(hitPosition, hitRotation);                   return true;             }         }         return false;     }


	//-----------------------------------
	// Update function checks for hittest
	//-----------------------------------
	private void LateUpdate()
	{         
        if (GameObject.Find("Pointer 1") != null && startvalue==0)
        {
            
           // Campos = chagepos.transform.position;
            GameObject distancepoint = GameObject.Find("Pointer 1");
            Vector3 modelpos1 = distancepoint.transform.position;             Campos = Camera.main.transform.position;
            float distance1 = Vector3.Distance(Campos, modelpos1);
            Debug.Log("The distance betwenn Ponter1 and camera is = " + distance1);             if(distance1 < 1)             {                 Debug.Log("Position Updated " );                 //Campos.x = 246f;                 //Campos.z = 121f;                  //userpos.transform.position=new Vector3(-1.04f,0,-2.39f);                 //Camera.main.transform.position=userpos.transform.position   ;                // chagepos.transform.position = userpos.transform.position;                 chagepos.transform.position = new Vector3(Campos.x, 0, Campos.z);                     Debug.Log("Updated Positions now " + Campos.x + "===" + Campos.z);                 startvalue = 1;             }          }


        if (startvalue == 1)         {
            userpos.transform.position = Camera.main.transform.position;
            if (period > nextUpdate)
            {
                //Do Stuff




                Campos.x = chagepos.transform.position.x;
                Campos.z = chagepos.transform.position.z;
                 //TakeCoordinates.text = Campos.x.ToString() + "---" + Campos.z.ToString();
               // Debug.Log("Updated Positions next " + Campos.x + "===" + Campos.z);

                StartCoroutine(UpdatePosition(Campos.x, Campos.z));




                period = 0;
            }
            period += UnityEngine.Time.deltaTime;          }          if (GameObject.Find("SBlue 1") != null)         {             firstcircle = GameObject.Find("SBlue 1");             Vector3 modelpos1 = firstcircle.transform.position;             Campos = Camera.main.transform.position;              distance1 = Vector3.Distance(Campos, modelpos1);          }           if (GameObject.Find("SBlue 2") != null)         {              secondcircle = GameObject.Find("SBlue 2");             Vector3 modelpos2 = secondcircle.transform.position;             Campos = Camera.main.transform.position;              distance2 = Vector3.Distance(Campos, modelpos2);          }           if (GameObject.Find("SBlue 3") != null)         {              thirdcircle = GameObject.Find("SBlue 3");             Vector3 modelpos3 = thirdcircle.transform.position;             Campos = Camera.main.transform.position;              distance3 = Vector3.Distance(Campos, modelpos3);          }            //Debug.Log("All Distances d1= " + distance1 +"d2= "+distance2+"d3= "+distance3);         if (distance1>0 && distance2>0 && distance3>0)         {             //TakeCoordinates.text = distance1 + ">>" + distance2 + ">>" + distance3;                      }
	}               IEnumerator UpdatePosition(float xxpos,float yypos)     {         Debug.Log("Upload Started");          string devid = Getposition.deviceinfo;         string useid = Introscript.id;           Debug.Log("Position values"+ xxpos+" -- "+yypos+" -- "+devid+" -- "+useid);         string URL4 = "http://sightica.com/casino/insert_xy.php?x="+xxpos+"&y="+yypos+"&device="+devid+"&id="+useid;         WWW readjson = new WWW(URL4);         yield return readjson;              Debug.Log("Uploaded Position Returned"+readjson.text);           if (string.IsNullOrEmpty(readjson.error))         {              JSONDataString = readjson.text;         }         JSONNode JNode = SimpleJSON.JSON.Parse(JSONDataString);         string upload = JNode["success"];         if (upload == "success")         {             Debug.Log("Uploaded Position");          }       }        
	void Update()     {          // Check if the screen is touched         //-----------------------------------          if (Input.touchCount == 1)         {             var touch = Input.GetTouch(0);             if (touch.phase == TouchPhase.Began)             {                 if (EventSystem.current.currentSelectedGameObject == null)                 {                      Debug.Log("Not touching a UI button. Moving on.");                      // add new shape                     var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);                     ARPoint point = new ARPoint                     {                         x = screenPosition.x,                         y = screenPosition.y                     } ;                      // prioritize reults types                     ARHitTestResultType[] resultTypes = {                         ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent,                        // ARHitTestResultType.ARHitTestResultTypeExistingPlane,                         //ARHitTestResultType.ARHitTestResultTypeEstimatedHorizontalPlane,                         //ARHitTestResultType.ARHitTestResultTypeEstimatedVerticalPlane,                         //ARHitTestResultType.ARHitTestResultTypeFeaturePoint                     } ;                      foreach (ARHitTestResultType resultType in resultTypes)                     {                         if (HitTestWithResultType(point, resultType))                         {                             Debug.Log("Found a hit test result");                             return;                         }                     }                 }             }         }             shapeobjnum = shapeObjList.Count;         shapelistnum = shapeInfoList.Count;          if (shapeobjnum == 0 && shapelistnum == 0)         {             // ClearShapes();             //shapeobjnum = shapeObjList.Count;             //shapelistnum = shapeInfoList.Count;             // Debug.Log("First");             // Debug.Log("First " + shapeObjList.Count + " - " + shapeInfoList.Count);             //delnum = true;          }       }      public void OnSimulatorDropShape()     {         Vector3 dropPosition = Camera.main.transform.position + Camera.main.transform.forward * 0.3f;         Quaternion dropRotation = Camera.main.transform.rotation;         //Quaternion dropRotation = Quaternion.Euler(0,90,0);          AddShape(dropPosition, dropRotation);      }      //-------------------------------------------------     // All shape management functions (add shapes, save shapes to metadata etc.     //-------------------------------------------------      public void AddShape(Vector3 shapePosition, Quaternion shapeRotation)     {         //  System.Random rnd = new System.Random();         //PrimitiveType type = (PrimitiveType)rnd.Next(0, 3);          shapeInfo = new ShapeInfo();         shapeInfo.px = shapePosition.x;         shapeInfo.py = shapePosition.y;         shapeInfo.pz = shapePosition.z;         shapeInfo.qx = shapeRotation.x;         shapeInfo.qy = shapeRotation.y;         shapeInfo.qz = shapeRotation.z;         shapeInfo.qw = shapeRotation.w;         shapeInfo.shapeType = key;         shapeInfoList.Add(shapeInfo);          GameObject shape = ShapeFromInfo(shapeInfo);          shapeObjList.Add(shape);     }       public GameObject ShapeFromInfo(ShapeInfo info)     {         //GameObject shape = GameObject.CreatePrimitive((PrimitiveType)info.shapeType);         // shape= Instantiate(models[Random.Range(0, 3)], new Vector3(0, 0, 0), Quaternion.Euler(0, 0, 0));          key = info.shapeType;          mystack.Push(key);         if (key == 0)         {                        // Debug.Log("CountDetails after Delete 0 = " + touchescount0);              touchescount0 = touchescount0 + 1;                //shape = Instantiate(arrow,new Vector3(0,0,0),Quaternion.Euler(0,0,0));             shape = Instantiate(models[key], new Vector3(info.px, info.py, info.pz), Quaternion.Euler(info.qx, info.qy, info.qz));              Vector3 aa;             aa.x = info.px;             aa.y = info.py;             aa.z = info.pz;             Debug.Log("Cartesian Values0 are ="+aa.x+"-"+aa.y+"-"+aa.z);             // Debug.Log("CountDetails0 = " +touchescount0);              modelid.Add(0);             modelrefno.Add(touchescount0);             shape.name = "Path" + " " + touchescount0;             modelname.Add(shape.name);
               double latti = Getposition.latitudes;             double longii = Getposition.longitudes;
            int mid = 0;             int mversion =touchescount0;             string devid = Getposition.deviceinfo;             string useid = Introscript.id;               //Debug.Log("Before upload = " + latti + " - " + longii + " - " + mid +"-"+ mversion+ "Device Info = " + devid + " IDS " + useid);              StartCoroutine(UploadAllinfo(latti,longii,mid,mversion,devid,useid));             //Dholder.Add(mode);                       }         else if (key == 1)         {                          //Debug.Log("CountDetails after Delete 1 = " + touchescount1);              touchescount1 = touchescount1 + 1;             // Debug.Log("After Adding SMBlue1=  " + touchescount1);              GameObject objs = Instantiate(models[key], new Vector3(info.px, info.py, info.pz), Quaternion.Euler(info.qx, info.qy, info.qz));             shape = objs;                Vector3 aa;             aa.x = info.px;             aa.y = info.py;             aa.z = info.pz;             Debug.Log("Cartesian Values1 are =" + aa.x + "-" + aa.y + "-" + aa.z);               modelid.Add(1);             modelrefno.Add(touchescount1);              shape.name = "SBlue" + " " + touchescount1;             shape.transform.GetChild(2).name = "Touchpoint" + touchescount1;             Touchname.Add(shape.transform.GetChild(2).name);             Debug.Log("Shape Details " +shape.transform.GetChild(2).name);              modelname.Add(shape.name);             // Debug.Log("ModelDetails " + modelid[1] + "-" + modelrefno[1] + "-" + modelname[1]);              //key = 0;                  double latti = Getposition.latitudes;             double longii = Getposition.longitudes;             int mid = 1;             int mversion = touchescount1;             string devid = Getposition.deviceinfo;             string useid = Introscript.id;               Debug.Log("Before upload = " + latti + " - " + longii + " - " + mid +"-"+ mversion+ "Device Info = " + devid + " IDS " + useid);              StartCoroutine(UploadAllinfo(latti, longii, mid, mversion, devid, useid));           }          else if (key == 2)         {             touchescount2 = touchescount2 + 1;              //Debug.Log("Welcome Added = " + touchescount2);              GameObject objs = Instantiate(models[key], new Vector3(info.px, info.py, info.pz), Quaternion.Euler(info.qx, info.qy, info.qz));             shape = objs;                          modelid.Add(2);             modelrefno.Add(touchescount2);             shape.name = "WelcomeStart" + " " + touchescount2;             modelname.Add(shape.name);           //  Debug.Log("ModelDetails " + modelid[2] + "-" + modelrefno[2] + "-" + modelname[2]);               double latti = Getposition.latitudes;             double longii = Getposition.longitudes;             int mid = 2;             int mversion = touchescount2;             string devid = Getposition.deviceinfo;             string useid = Introscript.id;               //Debug.Log("Before upload = " + latti + " - " + longii + " - " + mid +"-"+ mversion+ "Device Info = " + devid + " IDS " + useid);              StartCoroutine(UploadAllinfo(latti, longii, mid, mversion, devid, useid));           }         else if (key == 3)         {                                     touchescount3 = touchescount3 + 1;            // Debug.Log("CountDetails3= " + touchescount3);              GameObject objs = Instantiate(models[key], new Vector3(info.px, info.py, info.pz), Quaternion.Euler(info.qx, info.qy, info.qz));             shape = objs;              modelid.Add(3);             modelrefno.Add(touchescount3);             shape.name = "Restroom" + " " + touchescount3;             modelname.Add(shape.name);                double latti = Getposition.latitudes;             double longii = Getposition.longitudes;             int mid = 3;             int mversion = touchescount3;             string devid = Getposition.deviceinfo;             string useid = Introscript.id;               //Debug.Log("Before upload = " + latti + " - " + longii + " - " + mid +"-"+ mversion+ "Device Info = " + devid + " IDS " + useid);              StartCoroutine(UploadAllinfo(latti, longii, mid, mversion, devid, useid));          }          else if (key == 4)         {                                   //Debug.Log("CountDetails after Delete4= " + touchescount4);             touchescount4 = touchescount4 + 1;             // Debug.Log("CountDetails4= " + touchescount4);             GameObject objs = Instantiate(models[key], new Vector3(info.px, info.py, info.pz), Quaternion.Euler(info.qx, info.qy, info.qz));             shape = objs;              modelid.Add(4);             modelrefno.Add(touchescount4);             shape.name = "Restaurant" + " " + touchescount4;             modelname.Add(shape.name);                 double latti = Getposition.latitudes;             double longii = Getposition.longitudes;             int mid = 4;             int mversion = touchescount4;             string devid = Getposition.deviceinfo;             string useid = Introscript.id;               //Debug.Log("Before upload = " + latti + " - " + longii + " - " + mid +"-"+ mversion+ "Device Info = " + devid + " IDS " + useid);              StartCoroutine(UploadAllinfo(latti, longii, mid, mversion, devid, useid));          }          else if (key == 5)         {                                     touchescount5 = touchescount5 + 1;             //Debug.Log("CountDetails5= " + touchescount5);              shape = Instantiate(models[5], new Vector3(info.px, info.py, info.pz), Quaternion.Euler(info.qx, info.qy, info.qz));               modelid.Add(5);             modelrefno.Add(touchescount5);             shape.name = "Elevators" + " " + touchescount5;             modelname.Add(shape.name);                double latti = Getposition.latitudes;             double longii = Getposition.longitudes;             int mid = 5;             int mversion = touchescount5;             string devid = Getposition.deviceinfo;             string useid = Introscript.id;               //Debug.Log("Before upload = " + latti + " - " + longii + " - " + mid +"-"+ mversion+ "Device Info = " + devid + " IDS " + useid);              StartCoroutine(UploadAllinfo(latti, longii, mid, mversion, devid, useid));          }         else if (key == 6)         {                                     touchescount6 = touchescount6 + 1;              //Debug.Log("CountDetails6= " + touchescount6);             shape = Instantiate(models[6], new Vector3(info.px, info.py, info.pz), Quaternion.Euler(info.qx, info.qy, info.qz));                           modelid.Add(6);             modelrefno.Add(touchescount6);             shape.name = "Exit" + " " + touchescount6;             modelname.Add(shape.name);                 double latti = Getposition.latitudes;             double longii = Getposition.longitudes;             int mid = 6;             int mversion = touchescount6;             string devid = Getposition.deviceinfo;             string useid = Introscript.id;               //Debug.Log("Before upload = " + latti + " - " + longii + " - " + mid +"-"+ mversion+ "Device Info = " + devid + " IDS " + useid);              StartCoroutine(UploadAllinfo(latti, longii, mid, mversion, devid, useid));           }            else if (key == 7)         {               touchescount7 = touchescount7 + 1;              //Debug.Log("CountDetails6= " + touchescount6);             shape = Instantiate(models[7], new Vector3(info.px, info.py, info.pz), Quaternion.Euler(info.qx, info.qy, info.qz));                modelid.Add(7);             modelrefno.Add(touchescount7);             shape.name = "Pointer" + " " + touchescount7;             modelname.Add(shape.name);                 double latti = Getposition.latitudes;             double longii = Getposition.longitudes;             int mid = 7;             int mversion = touchescount7;             string devid = Getposition.deviceinfo;             string useid = Introscript.id;               //Debug.Log("Before upload = " + latti + " - " + longii + " - " + mid +"-"+ mversion+ "Device Info = " + devid + " IDS " + useid);              StartCoroutine(UploadAllinfo(latti, longii, mid, mversion, devid, useid));           }            else         {              Debug.Log("No Nutton Clicked");         }          shape.transform.position = new Vector3(info.px, info.py, info.pz);         shape.transform.rotation = new Quaternion(info.qx, info.qy, info.qz, info.qw);         // shape.transform.localScale = new Vector3(0.05f, 0.05f, 0.05f);         // shape.GetComponent<MeshRenderer>().material = mShapeMaterial;         //shape.GetComponent<MeshRenderer> ().material.color = Color.yellow;           return shape;     }      public void ClearShapes()     {         foreach (var obj in shapeObjList)         {             Destroy(obj);         }         shapeObjList.Clear();         shapeInfoList.Clear();     }       public JObject Shapes2JSON()     {         ShapeList shapeList = new ShapeList();         shapeList.shapes = new ShapeInfo[shapeInfoList.Count];         for (int i = 0; i < shapeInfoList.Count; i++)         {             shapeList.shapes[i] = shapeInfoList[i];         }          return JObject.FromObject(shapeList);     }      public void LoadShapesJSON(JToken mapMetadata)     {         ClearShapes();         Debug.Log("Inside LoadShapesJSON of ShapeManager *****************");         if (mapMetadata is JObject && mapMetadata["shapeList"] is JObject)         {             ShapeList shapeList = mapMetadata["shapeList"].ToObject<ShapeList>();             if (shapeList.shapes == null)             {                 Debug.Log("no shapes dropped");                 return;             }              foreach (var shapeInfo in shapeList.shapes)             {                 shapeInfoList.Add(shapeInfo);                 GameObject shape = ShapeFromInfo(shapeInfo);                 shapeObjList.Add(shape);                  Debug.Log(shape.ToString());             }         }     }        public void DeleteShapes()     {            if (shapeObjList.Count == 0 && shapeInfoList.Count == 0 && modelid.Count==0 && modelrefno.Count==0 && modelname.Count==0 )         {             Debug.Log("Nothing to Delete");          }         else         {            // Debug.Log("Before Delete " + shapeObjList.Count + " - " + shapeInfoList.Count);             Destroy(shapeObjList[shapeobjnum - 1]);             shapeInfoList[shapelistnum - 1] = null;             shapeObjList.RemoveAt(shapeobjnum - 1);             shapeInfoList.RemoveAt(shapelistnum - 1);            //  Debug.Log("After Delete " + shapeObjList.Count + " - " + shapeInfoList.Count);                          string myst=mystack.Pop().ToString();             //Debug.Log("Mystack Value ="+myst);              int.TryParse(myst,out key);             // Debug.Log("Mystack Key =" + key);             if (key == 0 && touchescount0 > 0)             {                 touchescount0 = touchescount0 - 1;             }             if (key == 1 && touchescount1 > 0)             {                 touchescount1 = touchescount1 - 1;                // Debug.Log("While Deleting SMblue = " + touchescount1);             }              if (key == 2 && touchescount2 > 0)             {                 touchescount2 = touchescount2 - 1;              }              if (key == 3 && touchescount3 > 0)             {                 touchescount3 = touchescount3 - 1;              }             if (key == 4 && touchescount4 > 0)             {                 touchescount4 = touchescount4 - 1;             }             if (key == 5 && touchescount5 > 0)             {                 touchescount5 = touchescount5 - 1;             }             if (key == 6)             {                 touchescount6 = touchescount6 - 1;             }              if (key == 7)             {                 touchescount7 = touchescount7 - 1;             }              //DeleteValue = 1;               if(modelid.Count>0)             {                 modelid.RemoveAt(modelid.Count - 1);              }              if (modelrefno.Count > 0)             {                 modelrefno.RemoveAt(modelrefno.Count - 1);             }

            if (modelname.Count > 0)             {

                modelname.RemoveAt(modelname.Count - 1);             }               if (Touchname.Count > 0)             {                  Touchname.RemoveAt(Touchname.Count - 1);             }              if(TouchPoints.insta1.Count>0)             {                  TouchPoints.insta1.RemoveAt(TouchPoints.insta1.Count-1);             }             //Debug.Log("Model Details " + modelid[0] + "-" + modelrefno[0] + "-" + modelname[0]);             if(token!=null)             {                 StartCoroutine(Deleteinfo(token));              }           }      }          public void Rightbtn()     {          if (shapeObjList.Count > 0 && shapeInfoList.Count > 0)         {             shapeObjList[shapeObjList.Count - 1].transform.Rotate(0, -10, 0);               RemoveAdd();          }                     //Vector3 pos = shapeObjList[shapeObjList.Count - 1].transform.position;             //Quaternion rot = shapeObjList[shapeObjList.Count - 1].transform.rotation;              //Debug.Log("Before Right " + shapeObjList.Count + " - " + shapeInfoList.Count);             //shapeInfoList.RemoveAt(shapeInfoList.Count - 1);              //shapeInfo.px = pos.x;             //shapeInfo.py = pos.y;             //shapeInfo.pz = pos.z;             //shapeInfo.qx = rot.x;             //shapeInfo.qy = rot.y;             //shapeInfo.qz = rot.z;             //shapeInfo.qw = rot.w;             ////shapeInfo.shapeType = type.GetHashCode();             //shapeInfoList.Add(shapeInfo);             //Debug.Log("After Right " + shapeObjList.Count + " - " + shapeInfoList.Count);       }      public void Leftbtn()     {



        if (shapeObjList.Count > 0 && shapeInfoList.Count > 0)         {             shapeObjList[shapeObjList.Count - 1].transform.Rotate(0, 10, 0);              RemoveAdd();         }       }        public void Upbtn()     {         if (shapeObjList.Count > 0 && shapeInfoList.Count > 0)             shapeObjList[shapeObjList.Count - 1].transform.Rotate(10, 0, 0);         RemoveAdd();      }      public void Downbtn()     {         if (shapeObjList.Count > 0 && shapeInfoList.Count > 0)             shapeObjList[shapeObjList.Count - 1].transform.Rotate(-10, 0, 0);         RemoveAdd();      }       public void RemoveAdd()     {         Vector3 pos = shapeObjList[shapeObjList.Count - 1].transform.position;         Quaternion rot = shapeObjList[shapeObjList.Count - 1].transform.rotation;          Debug.Log("Before Right " + shapeObjList.Count + " - " + shapeInfoList.Count);         shapeInfoList.RemoveAt(shapeInfoList.Count - 1);          shapeInfo.px = pos.x;         shapeInfo.py = pos.y;         shapeInfo.pz = pos.z;         shapeInfo.qx = rot.x;         shapeInfo.qy = rot.y;         shapeInfo.qz = rot.z;         shapeInfo.qw = rot.w;         shapeInfo.shapeType = key;         shapeInfoList.Add(shapeInfo);         Debug.Log("After Right " + shapeObjList.Count + " - " + shapeInfoList.Count);      }          IEnumerator UploadAllinfo(double lats,double longs,int mids,int mvers,string devices,string ids )     {           Debug.Log("Calling upload = " + lats + " - " + longs + " - " + mids + "-" + mvers + "Device Info = " + devices + " IDS " + ids);          string URL2 = "http://sightica.com/casino/insert-model.php?lat=" + lats + "&lon=" + longs + "&model_id=" + mids + "&version=" +mvers +"&device=" + devices + "&user_id=" + ids;         WWW readjson = new WWW(URL2);         yield return readjson;            Debug.Log("WHAT VALUE RETURNED -------"+readjson.text);           if (string.IsNullOrEmpty(readjson.error))         {              JSONDataString = readjson.text;         }         JSONNode JNode = SimpleJSON.JSON.Parse(JSONDataString);         string upload;         upload = JNode["success"];         if (upload == "success")         {             Debug.Log("Uploaded successfully");             token = JNode["token"];             Debug.Log("token =" + token);         }         }         IEnumerator Deleteinfo(string tokens)     {         string URL3 = "http://sightica.com/casino/delete_model.php?token=" + tokens;         WWW readjson = new WWW(URL3);         yield return readjson;            Debug.Log("WHAT Token -------" + readjson.text);           if (string.IsNullOrEmpty(readjson.error))         {              JSONDataString = readjson.text;         }         JSONNode JNode = SimpleJSON.JSON.Parse(JSONDataString);         string upload;         upload = JNode["success"];         if (upload == "success")         {             Debug.Log("Uploaded Token successfully");          }              }      public void AddPath()     {         key = 0;       }       public void AddModelbtn()     {         key = 1;        }       public void AddWelcome()     {         key = 2;       }     public void AddRestroom()     {         key = 3;       }     public void AddRestaurants()     {         key = 4;       }      public void AddElevators()     {         key = 5;       }        public void AddExit()     {         key = 6;       }      public void AddPointer()     {         key = 7;       }        public void Mapdetails()     {         if (camshow == 0)         {             posdetails.SetActive(true);
            //maincam.enabled = false;
            Mapcam.enabled = true;            // mappinglistpanel.SetActive(false);
             camshow = 1;         }
        else if(camshow == 1)         {             posdetails.SetActive(false);            // maincam.enabled = true;             Mapcam.enabled = false;            // mappinglistpanel.SetActive(true);             camshow = 0;          }     }  }  